(define car (lambda (l) (car l)))

(define second (lambda (l) (car (cdr l))))

(define list?
  (lambda (lst)
      (or (empty? lst)
            (and (pair? lst)
                    (list? (cdr lst))))))

(define make-ok
  (lambda (val) (cons 0 val)))

(define make-error
  (lambda (msg) (cons 1 msg)))

(define ok?
  (lambda (res)
    (if(result? res)  
       (if(eq?(car res) 0)
          #t
          #f)
       #f)))
  
(define error?
  (lambda (res)
    (if(result? res) 
       (if(eq?(car res) 1)
          #t
          #f)
       #f)))

(define result?
  (lambda (res)
    (if(pair? res)
           (if (or (eq? (car res) 0) (eq? (car res) 1))
               #t
               #f)
       #f)))

(define result->val
  (lambda (res) (cdr res)))
  
(define empty?
  (lambda (lst)
    (eq? lst '())))

(define bind
  (lambda (f)
    (lambda (result)
      (if (ok? result)
          (f (cdr result))
          result))))

(define make-dict
  (lambda () (list)))

(define dict?
  (lambda (e) 
    (if (empty? e)
      #t
      (if (pair? (car e))
        (dict? (cdr e))
        #f))))

(define makePair
  (lambda (key value) (cons key value)))

(define getcarKeyPair
  (lambda (dict) (car (car dict))))
  
(define addToDict 
  (lambda (dict key value)
    (if (empty? dict)
     (cons (makePair key value) '())
     (if(eq? (getcarKeyPair dict) key)
        (cons (makePair key value) (cdr dict))
        (cons (car dict) (addToDict (cdr dict) key value))))))
    
(define put
  (lambda (dict k v)
    (if (dict? dict)
        (make-ok (addToDict dict k v))
        (make-error "Error: not a dictionary"))))

(define recursiveGetPair
  (lambda (dict key)
    (if (empty? dict)
        '()
        (if (eq? (car(car dict)) key)
            (car dict)
            (recursiveGetPair (cdr dict) key)))))

(define get
  (lambda (dict k)
  (if (dict? dict)      
      (if (empty?(recursiveGetPair dict k))
          (make-error "Key not found")
          (make-ok(cdr (recursiveGetPair dict k))))
      (make-error "Error: not a dictionary"))))

(define map-rec
  (lambda (f dict)
    (if (empty? dict)
        (list)
        (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-rec f (cdr dict))))))

(define map-dict
  (lambda (dict f)
    (if (dict? dict)
        (make-ok (map-rec f dict))
        (make-error ("Error: not a dictionary")))))


(define filter-rec
  (lambda (pred dict)
    (if (empty? dict)
        (list)
        (if (pred (car (car dict)) (cdr (car dict)))
            (cons (car dict) (filter-rec pred (cdr dict)))
            (filter-rec pred (cdr dict))))))

(define filter-dict
  (lambda (dict pred)
    (if (dict? dict)
        (make-ok (filter-rec pred dict))
        (make-error ("Error: not a dictionary")))))
